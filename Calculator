package com.calculator.app;

import com.calculator.operations.Operate;
import com.calculator.operations.impl.Add;
import com.calculator.operations.impl.Divide;
import com.calculator.operations.impl.Multiply;
import com.calculator.operations.impl.Subtract;
import com.calculator.reader.ReadInput;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MainApp {

    public static void main(String[] args) {
        final String inputExp = ReadInput.read();

        Queue<String> operations;
        Queue<String> numbers;

        String numbersArr[] = inputExp.split("[-+*/]");
        String operArr[] = inputExp.split("[0-9]+");

        numbers = new LinkedList<String>(Arrays.asList(numbersArr));
        operations = new LinkedList<String>(Arrays.asList(operArr));

        Double res = Double.parseDouble(numbers.poll());

        while(!numbers.isEmpty()) {
            String opr = operations.poll();

            Operate operate;
            switch (opr) {
                case "+":
                    operate = new Add();
                    break;
                case "-":
                    operate = new Subtract();
                    break;
                case "*":
                    operate = new Multiply();
                    break;
                case "/":
                    operate = new Divide();
                    break;
                default:
                    continue;
            }

            Double num = Double.parseDouble(numbers.poll());

            res = operate.getResult(res, num);
        }

        System.out.println(res);
    }
}

/**************End of First Package **************/



/**************Start of Second Package **************/


package com.calculator.reader;

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ReadInput {

    private final String regex = "([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)";

    public ReadInput() {}

    public boolean validateInput(String input) {
        Pattern pattern = Pattern.compile(this.regex);
        Matcher matcher = pattern.matcher(input);

        return matcher.matches();
    }

    public static String read() {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Input expression (for eg: 4*3/2)");

        String inputLine = scanner.nextLine();

        ReadInput readInput = new ReadInput();

        if(!readInput.validateInput(inputLine)) {
            System.out.println("Mathematical expression validation failed");
            System.exit(0);
        }

        return inputLine;
    }
}


/**************End of Second Package **************/


/**************Start of Third Package **************/


package com.calculator.operations;

public interface Operate {
    Double getResult(Double... numbers);
}


/**************End of Third Package **************/


/**************Start of Fourth Package **************/

package com.calculator.operations.impl;

import com.calculator.operations.Operate;

public class Add implements Operate {

    @Override
    public Double getResult(Double... numbers) {
        Double sum = 0.0;

        for(Double num : numbers) {
            sum += num;
        }

        return sum;
    }
}

package com.calculator.operations.impl;

import com.calculator.operations.Operate;

public class Divide implements Operate {

    @Override
    public Double getResult(Double... numbers) {
        Double result = numbers[0];

        for(int i = 1; i < numbers.length; i++) {
            result /= numbers[i];
        }

        return result;
    }
}


package com.calculator.operations.impl;

import com.calculator.operations.Operate;

public class Multiply implements Operate {

    @Override
    public Double getResult(Double... numbers) {
        Double result = 1.0;

        for(Double num : numbers) {
            result *= num;
        }

        return result;
    }
}

package com.calculator.operations.impl;

import com.calculator.operations.Operate;

public class Subtract implements Operate {

    @Override
    public Double getResult(Double... numbers) {
        Double result = numbers[0];

        for(int i = 1; i < numbers.length; i++) {
            result -= numbers[i];
        }

        return result;
    }
}
